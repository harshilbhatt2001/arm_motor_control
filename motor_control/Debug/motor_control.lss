
motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a8  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002a8  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000002d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016e9  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083b  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ed  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001eb  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c6  00000000  00000000  00002db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Enable_Interrupt 0000001a  000001da  000001da  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000004a  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000010  0000020e  0000020e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_16 0000002c  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spiX_initslave 00000044  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spiX_get 00000006  0000022c  0000022c  000002a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.protected_write_io 0000000e  0000021e  0000021e  00000292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.system_init 00000030  00000158  00000158  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.UART_init 0000001a  000001f4  000001f4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_8 0000004e  0000007c  0000007c  000000f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.TransmitByte 00000026  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.UART_TxTail 00000001  0080006a  0080006a  000002a8  2**0
                  ALLOC
 26 .bss.UART_TxHead 00000001  0080006b  0080006b  000002a8  2**0
                  ALLOC
 27 .bss.UART_TxBuf 00000008  00800062  00800062  000002a8  2**0
                  ALLOC
 28 .bss.UART_RxTail 00000001  0080006c  0080006c  000002a8  2**0
                  ALLOC
 29 .bss.UART_RxHead 00000001  0080006d  0080006d  000002a8  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	17 c0       	rjmp	.+46     	; 0x30 <__ctors_end>
   2:	63 c0       	rjmp	.+198    	; 0xca <__vector_1>
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	15 c1       	rjmp	.+554    	; 0x232 <__bad_interrupt>
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	13 c1       	rjmp	.+550    	; 0x232 <__bad_interrupt>
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	11 c1       	rjmp	.+546    	; 0x232 <__bad_interrupt>
  10:	35 c0       	rjmp	.+106    	; 0x7c <_etext>
  12:	0f c1       	rjmp	.+542    	; 0x232 <__bad_interrupt>
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	0d c1       	rjmp	.+538    	; 0x232 <__bad_interrupt>
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	0b c1       	rjmp	.+534    	; 0x232 <__bad_interrupt>
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	09 c1       	rjmp	.+530    	; 0x232 <__bad_interrupt>
  20:	b3 c0       	rjmp	.+358    	; 0x188 <__vector_16>
  22:	07 c1       	rjmp	.+526    	; 0x232 <__bad_interrupt>
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	05 c1       	rjmp	.+522    	; 0x232 <__bad_interrupt>
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>

0000002a <.dinit>:
  2a:	00 60       	ori	r16, 0x00	; 0
  2c:	00 6e       	ori	r16, 0xE0	; 224
  2e:	80 00       	.word	0x0080	; ????

00000030 <__ctors_end>:
  30:	11 24       	eor	r1, r1
  32:	1f be       	out	0x3f, r1	; 63
  34:	cf ed       	ldi	r28, 0xDF	; 223
  36:	cd bf       	out	0x3d, r28	; 61

00000038 <__do_copy_data>:
  38:	ea e2       	ldi	r30, 0x2A	; 42
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	40 e0       	ldi	r20, 0x00	; 0
  3e:	17 c0       	rjmp	.+46     	; 0x6e <__do_clear_bss+0x8>
  40:	b5 91       	lpm	r27, Z+
  42:	a5 91       	lpm	r26, Z+
  44:	35 91       	lpm	r19, Z+
  46:	25 91       	lpm	r18, Z+
  48:	05 91       	lpm	r16, Z+
  4a:	07 fd       	sbrc	r16, 7
  4c:	0c c0       	rjmp	.+24     	; 0x66 <__do_clear_bss>
  4e:	95 91       	lpm	r25, Z+
  50:	85 91       	lpm	r24, Z+
  52:	ef 01       	movw	r28, r30
  54:	f9 2f       	mov	r31, r25
  56:	e8 2f       	mov	r30, r24
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a2 17       	cp	r26, r18
  5e:	b3 07       	cpc	r27, r19
  60:	d9 f7       	brne	.-10     	; 0x58 <__SREG__+0x19>
  62:	fe 01       	movw	r30, r28
  64:	04 c0       	rjmp	.+8      	; 0x6e <__do_clear_bss+0x8>

00000066 <__do_clear_bss>:
  66:	1d 92       	st	X+, r1
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	e1 f7       	brne	.-8      	; 0x66 <__do_clear_bss>
  6e:	ef 32       	cpi	r30, 0x2F	; 47
  70:	f4 07       	cpc	r31, r20
  72:	31 f7       	brne	.-52     	; 0x40 <__SREG__+0x1>
  74:	cc d0       	rcall	.+408    	; 0x20e <main>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_exit>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>

Disassembly of section .text:

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

Disassembly of section .text.Enable_Interrupt:

000001da <Enable_Interrupt>:
 * Enable external interrupt
 * @param INT_NO
 */
void Enable_Interrupt(uint8_t INT_NO)
{
    switch (INT_NO) {
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <Enable_Interrupt+0xa>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	29 f0       	breq	.+10     	; 0x1ec <Enable_Interrupt+0x12>
 1e2:	08 95       	ret
        case 0:
			GIMSK |= (1 << INT0);
 1e4:	8b b7       	in	r24, 0x3b	; 59
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	8b bf       	out	0x3b, r24	; 59
			break;
 1ea:	08 95       	ret
		case 1:
			GIMSK |= (1 << INT1);
 1ec:	8b b7       	in	r24, 0x3b	; 59
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8b bf       	out	0x3b, r24	; 59
 1f2:	08 95       	ret

Disassembly of section .text.__vector_1:

000000ca <__vector_1>:
#include "avr/interrupt.h"

#define SPIMODE 0

ISR(INT0_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	TransmitByte(spiX_get());
  ec:	9f d0       	rcall	.+318    	; 0x22c <spiX_get>
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	61 d0       	rcall	.+194    	; 0x1b4 <TransmitByte>
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

Disassembly of section .text.main:

0000020e <main>:

int main(void)
{
    system_init();
 20e:	a4 df       	rcall	.-184    	; 0x158 <system_init>
    spiX_initslave(SPIMODE);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	80 df       	rcall	.-256    	; 0x114 <spiX_initslave>
	Enable_Interrupt(INT0);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	e0 df       	rcall	.-64     	; 0x1da <Enable_Interrupt>
    sei();
 21a:	78 94       	sei
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0xe>

Disassembly of section .text.__vector_16:

00000188 <__vector_16>:
 * For all modes, the USIDR contents are stored and flags updates
 */
//#pragma vector = USI_OVF_vect
//__interrupt void usiovf_handler
ISR(USI_OVERFLOW_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
    // TODO: Master must disable compare match interrupt
    // Update flags and clear USI counter
    USISR                        = (1 << USIOIF);
 194:	80 e4       	ldi	r24, 0x40	; 64
 196:	8e b9       	out	0x0e, r24	; 14
    spiX_status.transferComplete = 1;
 198:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <spiX_status>
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <spiX_status>

    // Copy USIDR to buffer
    storedUSIDR = USIDR;
 1a2:	8f b1       	in	r24, 0x0f	; 15
 1a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

Disassembly of section .text.spiX_initslave:

00000114 <spiX_initslave>:
 * @param spimode   Must be 0 or 1
 */
void spiX_initslave(char spimode)
{
    // Configure port direction
    USI_DIR_REG |= (1 << USI_DATAOUT_PIN);                          // Output
 114:	97 b3       	in	r25, 0x17	; 23
 116:	90 64       	ori	r25, 0x40	; 64
 118:	97 bb       	out	0x17, r25	; 23
    USI_DIR_REG &= ~(1 << USI_DATAIN_PIN) | (1 << USI_CLOCK_PIN);   // input
 11a:	97 b3       	in	r25, 0x17	; 23
 11c:	9f 7d       	andi	r25, 0xDF	; 223
 11e:	97 bb       	out	0x17, r25	; 23
    USI_OUT_REG |= (1 << USI_DATAIN_PIN) | (1 << USI_CLOCK_PIN);    // pull-up
 120:	98 b3       	in	r25, 0x18	; 24
 122:	90 6a       	ori	r25, 0xA0	; 160
 124:	98 bb       	out	0x18, r25	; 24

    // Configure USI to 3-wire SPI slave with overflow interrupt
    USICR = (1 << USIOIE) | (1 << USIWM0) | (1 << USICS1) | (spimode << USICS0);
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	88 65       	ori	r24, 0x58	; 88
 132:	8d b9       	out	0x0d, r24	; 13

    // Init driver status register
    spiX_status.masterMode = 0;
 134:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <spiX_status>
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <spiX_status>
    spiX_status.transferComplete = 0;
 13e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <spiX_status>
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <spiX_status>
    spiX_status.writeCollision = 0;
 148:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <spiX_status>
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <spiX_status>

    storedUSIDR = 0;
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 156:	08 95       	ret

Disassembly of section .text.spiX_get:

0000022c <spiX_get>:
// }

unsigned char spiX_get()
{
    return storedUSIDR;
}
 22c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 230:	08 95       	ret

Disassembly of section .text.protected_write_io:

0000021e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 21e:	2f b7       	in	r18, 0x3f	; 63
	cli
 220:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 222:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 224:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 226:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 228:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 22a:	08 95       	ret

Disassembly of section .text.system_init:

00000158 <system_init>:
{
    /* On AVR devices all peripherals are enabled from power on reset, this
     * disables all peripherals to save power. Driver shall enable
     * peripheral if used */

    PRR = (1 << PRUSI) | (1 << PRUSART) | (1 << PRTIM0) | (1 << PRTIM1);
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	86 b9       	out	0x06, r24	; 6
            break;
        case PORT_DIR_OUT:
            DDRA |= mask;
            break;
        case PORT_DIR_OFF:
            DDRA &= ~mask;
 15c:	8a b3       	in	r24, 0x1a	; 26
 15e:	1a ba       	out	0x1a, r1	; 26

            PORTA |= mask;
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	8b bb       	out	0x1b, r24	; 27
            break;
        case PORT_DIR_OUT:
            DDRB |= mask;
            break;
        case PORT_DIR_OFF:
            DDRB &= ~mask;
 166:	97 b3       	in	r25, 0x17	; 23
 168:	17 ba       	out	0x17, r1	; 23

            PORTB |= mask;
 16a:	98 b3       	in	r25, 0x18	; 24
 16c:	88 bb       	out	0x18, r24	; 24
            break;
        case PORT_DIR_OUT:
            DDRD |= mask;
            break;
        case PORT_DIR_OFF:
            DDRD &= ~mask;
 16e:	91 b3       	in	r25, 0x11	; 17
 170:	11 ba       	out	0x11, r1	; 17

            PORTD |= mask;
 172:	92 b3       	in	r25, 0x12	; 18
 174:	82 bb       	out	0x12, r24	; 18

void system_init()
{
	mcu_init();
	
	UART_init(UBRR_VAL);
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	3d d0       	rcall	.+122    	; 0x1f4 <UART_init>
 * Initialize sysctrl interface
 */
static inline int8_t sysctrl_init()
{
    // Set system clock and prescaler according to configuration
    protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	60 e8       	ldi	r22, 0x80	; 128
 17e:	86 e4       	ldi	r24, 0x46	; 70
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	4d d0       	rcall	.+154    	; 0x21e <protected_write_io>
	
	MCUCR = (0 << PUD) | (0 << SM1) | (0 << SE) | (0 << SM0);
 184:	15 be       	out	0x35, r1	; 53
 186:	08 95       	ret

Disassembly of section .text.UART_init:

000001f4 <UART_init>:
void UART_init(unsigned char ubrr_val)
{
    unsigned char x;

    // Set baud rate
	UBRRH = (unsigned char)(ubrr_val >> 8);
 1f4:	12 b8       	out	0x02, r1	; 2
	UBRRL = (unsigned char)ubrr_val;
 1f6:	89 b9       	out	0x09, r24	; 9
	
	// Enable UART Receiver and Transmitter
	UCSRB = ((1 << RXEN) | (1 << TXEN) | (1 << RXCIE));
 1f8:	88 e9       	ldi	r24, 0x98	; 152
 1fa:	8a b9       	out	0x0a, r24	; 10

	// Flush Receive buffer
	x = 0;

	UART_RxTail = x;
 1fc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <UART_RxTail>
	UART_RxHead = x;
 200:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <UART_RxHead>
    UART_TxTail = x;
 204:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <UART_TxTail>
    UART_TxHead = x;
 208:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <UART_TxHead>
 20c:	08 95       	ret

Disassembly of section .text.__vector_8:

0000007c <__vector_8>:

/**
 * UART_TX_interrupt
 */
ISR(USART_UDRE_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
    unsigned char tmptail;

    // If data not transmitted, transmit data
    if (UART_TxHead != UART_TxTail)
  8e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <UART_TxHead>
  92:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <UART_TxTail>
  96:	98 17       	cp	r25, r24
  98:	61 f0       	breq	.+24     	; 0xb2 <__DATA_REGION_LENGTH__+0x32>
    {
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  9a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <UART_TxTail>
  9e:	ef 5f       	subi	r30, 0xFF	; 255
  a0:	e7 70       	andi	r30, 0x07	; 7
        UART_TxTail = tmptail;
  a2:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <UART_TxTail>
        UDR = UART_TxBuf[tmptail];
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ee 59       	subi	r30, 0x9E	; 158
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 81       	ld	r24, Z
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <__DATA_REGION_LENGTH__+0x38>
    }
    else
    {
        // Disable UDRE interrupt
        UCSRB &= ~(1 << UDRIE);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	8a b9       	out	0x0a, r24	; 10
    }
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

Disassembly of section .text.TransmitByte:

000001b4 <TransmitByte>:
 */
void TransmitByte(unsigned char data)
{
    unsigned char tmphead;

    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1b4:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <UART_TxHead>
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	27 70       	andi	r18, 0x07	; 7
    while (tmphead == UART_TxTail);
 1bc:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <UART_TxTail>
 1c0:	29 17       	cp	r18, r25
 1c2:	e1 f3       	breq	.-8      	; 0x1bc <TransmitByte+0x8>
    UART_TxBuf[tmphead] = data;
 1c4:	e2 2f       	mov	r30, r18
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ee 59       	subi	r30, 0x9E	; 158
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1ce:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <UART_TxHead>
    // Enable UDRE interrupt
    UDR |= (1 << UDRIE);
 1d2:	8c b1       	in	r24, 0x0c	; 12
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	8c b9       	out	0x0c, r24	; 12
 1d8:	08 95       	ret
